library(R6)

# gameboard and decks

gameboard <- data.frame(
  space = 1:40, 
  title = c(
    "Go", "Mediterranean Avenue", "Community Chest", "Baltic Avenue",
    "Income Tax", "Reading Railroad", "Oriental Avenue", "Chance",
    "Vermont Avenue", "Connecticut Avenue", "Jail", "St. Charles Place",
    "Electric Company", "States Avenue", "Virginia Avenue",
    "Pennsylvania Railroad", "St. James Place", "Community Chest",
    "Tennessee Avenue", "New York Avenue", "Free Parking",
    "Kentucky Avenue", "Chance", "Indiana Avenue", "Illinois Avenue",
    "B & O Railroad", "Atlantic Avenue", "Ventnor Avenue", "Water Works",
    "Marvin Gardens", "Go to jail", "Pacific Avenue",
    "North Carolina Avenue", "Community Chest", "Pennsylvania Avenue",
    "Short Line Railroad", "Chance", "Park Place", "Luxury Tax",
    "Boardwalk"), stringsAsFactors = FALSE)
chancedeck <- data.frame(
  index = 1:15, 
  card = c(
    "Advance to Go", "Advance to Illinois Ave.",
    "Advance to St. Charles Place", "Advance token to nearest Utility",
    "Advance token to the nearest Railroad",
    "Take a ride on the Reading Railroad",
    "Take a walk on the Boardwalk", "Go to Jail", "Go Back 3 Spaces",
    "Bank pays you dividend of $50", "Get out of Jail Free",
    "Make general repairs on all your property", "Pay poor tax of $15",
    "You have been elected Chairman of the Board", 
    "Your building loan matures"), stringsAsFactors = FALSE)
communitydeck <- data.frame(
  index = 1:16, 
  card = c(
    "Advance to Go", "Go to Jail",
    "Bank error in your favor. Collect $200", "Doctor's fees Pay $50",
    "From sale of stock you get $45", "Get Out of Jail Free",
    "Grand Opera Night Opening", "Xmas Fund matures", "Income tax refund",
    "Life insurance matures. Collect $100", "Pay hospital fees of $100",
    "Pay school tax of $150", "Receive for services $25",
    "You are assessed for street repairs",
    "You have won second prize in a beauty contest",
    "You inherit $100"), stringsAsFactors = FALSE)

# RandomDice class

RandomDice <- R6Class(
  classname = "RandomDice",
  public = list(
    verbose = NA,
    initialize = function(verbose = FALSE){
      stopifnot(is.logical(verbose))
      self$verbose = verbose
    },
    roll = function() {
      outcome <- sample(1:6, size = 2, replace = TRUE)
      if(self$verbose){
        cat("Dice Rolled:", outcome[1], outcome[2], "\n")
      }
      outcome
    }
  )
)

# Preset Dice 

PresetDice <- R6Class(
  classname = "PresetDice",
  public = list(
    verbose = NA,
    preset_rolls = double(0),
    position = 1,
    initialize = function(rolls, verbose = FALSE){
      stopifnot(is.logical(verbose))
      stopifnot(is.numeric(rolls))
      self$preset_rolls = rolls
      self$verbose = verbose
    },
    roll = function(){
      if(self$position > length(self$preset_rolls)){
        stop("You have run out of predetermined dice outcomes.")
      }
      outcome <- c(self$preset_rolls[self$position], 
                   self$preset_rolls[self$position + 1])
      self$position <- self$position + 2
      if(self$verbose){
        cat("Dice Rolled:", outcome[1], outcome[2], "\n")
      }
      outcome
    }
  )
)


# Chance and Community Decks 

CardDeck <- R6Class(
  classname = "CardDeck",
  public = list(
    verbose = NA,
    deck_order = double(0), 
    deck = data.frame(),
    position = 1,
    initialize = function(deck, verbose = FALSE){
      stopifnot(is.data.frame(deck),
                is.numeric(deck[[1]]),
                is.character(deck[[2]]))
      self$deck_order <- sample(length(deck[[1]]))
      self$verbose <- verbose
      self$deck <- deck
    },
    draw = function(){
      if(self$position > length(self$deck_order)){
        # if we run out of cards, shuffle deck
        # and reset the position to 1
        if(self$verbose){
          cat("Shuffling deck.\n")
        }
        self$deck_order <- sample(length(self$deck[[1]]))
        self$position <- 1
      }
      outcome <- c(self$deck_order[self$position]) # outcome is the value at position
      self$position <- self$position + 1 # advance the position by 1
      if(self$verbose){
        cat("Card:", self$deck[outcome, 2], "\n")
      }
      outcome # return the outcome
    }
  )
)


# R6 Class SpaceTracker 


SpaceTracker <- R6Class(
  classname = "SpaceTracker",
  public = list(
    counts = rep(0, 40),
    verbose = TRUE,
    tally = function(x){
      self$counts[x] <- self$counts[x] + 1
      if(self$verbose){
        cat("Added tally to ", x, ": ", gameboard$title[x], ".\n", sep = "")
      }
    },
    initialize = function(verbose){
      self$verbose <- verbose
    }
  )
)

# R6 Class Player

Player <- R6Class(
  classname = "Player",
  public = list(
    pos = 1,
    verbose = TRUE,
    isinJail = FALSE,   # add a new field 'isinJail'
    jailround = 0,      # add a new field 'jailround'
    move_fwd = function(n){
      self$pos <- self$pos + n
      if (self$pos > 40){
        self$pos <- self$pos - 40
      }
      if (self$verbose){
        cat("Player moves forward", n, "\n")
        cat("Player is now at", self$pos, ":", gameboard$title[self$pos], "\n")
      }
    },
    move_pos = function(pos){
      self$pos = pos
      if (self$verbose){
        if (self$pos == 11) {cat("Player goes to jail", '\n')}
        else {cat("Player moves to", self$pos, ':', gameboard$title[self$pos], '\n')}
      }
    },
    initialize = function(verbose = FALSE, pos = 1) {
      self$verbose <- verbose
      self$pos <- pos
    }
  )
)


# VERY BASIC turn taking example 

go = 1
mediterranean_avenue = 2
community_chest_1 = 3
baltic_avenue = 4
income_tax = 5
read_railroad_1 = 6
oriental_avenue = 7
chance_1 = 8
vermont_avenue = 9
connecticut_avenue = 10
jail = 11
st_charles_place = 12
utility_1 = 13
states_avenue = 14
virginia_avenue = 15
pen_railroad_2 = 16
st_james_place = 17
community_chest_2 = 18
ten_avenue = 19
ny_avenue = 20
free_parking = 21
ken_avenue = 22
chance_2 = 23
ind_avenue = 24
ill_avenue = 25
bo_railroad_3 = 26
atl_avenue = 27
ventnor_avenue = 28
utility_2 = 29
marvin_gardens = 30
go_to_jail = 31
pac_avenue = 32
nc_avenue = 33
community_chest_3 = 34
pen_avenue = 35
short_railroad_4 = 36
chance_3 = 37
park_place = 38
luxury_tax = 39
boardwalk = 40

# Helper Function
pos_helper = function(player) {
  # Chance Card
  if (player$pos == chance_1 | player$pos == chance_2 | player$pos == chance_3) {
    if (player$verbose) {cat('Draw a Chance card\n')}
    old_position = player$pos
    chance_card_position = chance$draw()
    if (chance_card_position == 1) {player$move_pos(go)}
    else if (chance_card_position == 2) {player$move_pos(ill_avenue)}
    else if (chance_card_position == 3) {player$move_pos(st_charles_place)}
    else if (chance_card_position == 4) {
      utility_vector = c(utility_1, utility_2)
      distance_vector = utility_vector - player$pos
      min_index = which.min(ifelse(distance_vector > 0, distance_vector, Inf))
      player$move_pos(utility_vector[min_index])
    }
    else if (chance_card_position == 5) {
      railroad_vector = c(read_railroad_1, pen_railroad_2, bo_railroad_3, short_railroad_4)
      distance_vector = railroad_vector - player$pos
      min_index = which.min(ifelse(distance_vector > 0, distance_vector, Inf))
      player$move_pos(railroad_vector[min_index])
    }
    else if (chance_card_position == 6) {player$move_pos(read_railroad_1)}
    else if (chance_card_position == 7) {player$move_pos(boardwalk)}
    else if (chance_card_position == 8) {
      player$move_pos(jail)
      player$isinJail = TRUE
    }
    else if (chance_card_position == 9) {player$move_fwd(-3)}
    new_position = player$pos
    return (unique(c(old_position, new_position)))
  } else if (player$pos == 3 | player$pos == 18 | player$pos == 34) {
    # Community Chest Card
    if (player$verbose) {cat('Draw a Community Chest card\n')}
    old_position = player$pos
    community_card_position = community$draw()
    if (community_card_position == 1) {player$move_pos(go)}
    else if (community_card_position == 2) {
      player$move_pos(jail)
      player$isinJail = TRUE
    }
    new_position = player$pos
    return (unique(c(old_position, new_position)))
  } else if (player$pos == go_to_jail) {
    player$move_pos(jail)
    player$isinJail = TRUE
    return (jail)
  } else {
    return (player$pos)
  }
}

# Take_turn function
take_turn <- function(player, spacetracker){
  
  # Roll dice
  dice_rolls = dice$roll()
  
  # print player current position
  if (player$verbose) {cat('Player starts at', player$pos, ':', gameboard$title[player$pos], '\n')}
  
  # Handle player in the jail
  if ((player$isinJail == TRUE) & (player$jailround < 2)){
    if (dice_rolls[1] == dice_rolls[2]) {
      if (player$verbose) {cat('In jail but rolled doubles, so player exits the jail', '\n')}
      player$isinJail = FALSE
      player$jailround = 0
      if (player$verbose) {cat('Player starts at', player$pos, ':', gameboard$title[player$pos], '\n')}
      player$move_fwd(sum(dice_rolls)) 
      position_vector = pos_helper(player)
      for (each in position_vector) {spacetracker$tally(each)}
      return()
    } else {
      if (player$verbose) {cat('Player stays in Jail', '\n')}
      player$jailround = player$jailround + 1
      spacetracker$tally(jail)
      return()
    }
  } else if ((player$isinJail == TRUE) & (player$jailround == 2)){
    if (player$verbose) {cat("Player's third turn in jail. Player must exit jail", '\n')}
    player$isinJail = FALSE
    player$jailround = 0
    if (player$verbose) {cat('Player starts at', player$pos, ':', gameboard$title[player$pos], '\n')}
    player$move_fwd(sum(dice_rolls)) 
    position_vector = pos_helper(player)
    for (each in position_vector) {spacetracker$tally(each)}
    return()
  }
  
  # Player not in jail
  player$move_fwd(sum(dice_rolls))
  position_vector = pos_helper(player)
  for (each in position_vector) {spacetracker$tally(each)}
  if ((player$isinJail == TRUE) & (dice_rolls[1] == dice_rolls[2])) {
    if (player$verbose) {cat('Double Count is now 1', '\n\n')}
  } else if ((player$isinJail == FALSE) & (dice_rolls[1] == dice_rolls[2])) {
    if (player$verbose) {cat('Double Count is now 1', '\n\n')}
    if (player$verbose) {cat('Player rolled double, so they take another turn', '\n')}
    dice_rolls = dice$roll()
    if (player$verbose) {cat('Player starts at', player$pos, ':', gameboard$title[player$pos], '\n')}
    player$move_fwd(sum(dice_rolls))
    position_vector = pos_helper(player)
    for (each in position_vector) {spacetracker$tally(each)}
    if ((player$isinJail == TRUE) & (dice_rolls[1] == dice_rolls[2])) {
      if (player$verbose) {cat('Double Count is now 2', '\n\n')}
    } else if ((player$isinJail == FALSE) & (dice_rolls[1] == dice_rolls[2])) {
      if (player$verbose) {cat('Double Count is now 2', '\n\n')}
      if (player$verbose) {cat('Player rolled double again, so they take another turn', '\n')}
      dice_rolls = dice$roll()
      if (dice_rolls[1] == dice_rolls[2]) {
        if (player$verbose) {cat('Double Count is now 3', '\n')}
        # Go to jail after rolling double three times
        player$move_pos(jail)
        player$isinJail = TRUE
        spacetracker$tally(jail)
      }
      else {
        if (player$verbose) {cat('Player starts at', player$pos, ':', gameboard$title[player$pos], '\n')}
        player$move_fwd(sum(dice_rolls))
        position_vector = pos_helper(player)
        for (each in position_vector) {spacetracker$tally(each)}
      }
    }
  }
}
